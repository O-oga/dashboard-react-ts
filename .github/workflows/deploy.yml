name: Build and Deploy to Portainer

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo
        run: |
          echo "repo_lower=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo_lower }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare docker-compose for Portainer
        run: |
          # Создаем docker-compose.yml с указанием образа из registry (lowercase)
          sed "s|image: dashboard-react:latest|image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo_lower }}:latest|g" docker-compose.yml > docker-compose.portainer.yml
          cat docker-compose.portainer.yml

      - name: Deploy to Portainer
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
          PORTAINER_STACK_ID: ${{ secrets.PORTAINER_STACK_ID }}
          PORTAINER_ENDPOINT_ID: ${{ secrets.PORTAINER_ENDPOINT_ID }}
        run: |
          # Установка jq для работы с JSON
          sudo apt-get update && sudo apt-get install -y jq curl
          
          # Получаем содержимое docker-compose.yml и экранируем для JSON
          COMPOSE_CONTENT=$(cat docker-compose.portainer.yml | jq -Rs .)
          
          # Обновляем стек через Portainer API
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
            "$PORTAINER_URL/api/stacks/$PORTAINER_STACK_ID?endpointId=$PORTAINER_ENDPOINT_ID" \
            -H "X-API-Key: $PORTAINER_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"StackFileContent\": $COMPOSE_CONTENT,
              \"Prune\": true,
              \"PullImage\": true
            }")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Stack updated successfully!"
            echo "$BODY" | jq .
          else
            echo "❌ Failed to update stack. HTTP Code: $HTTP_CODE"
            echo "$BODY"
            exit 1
          fi

